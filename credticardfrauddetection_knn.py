# -*- coding: utf-8 -*-
"""CredtiCardFraudDetection-KNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Jt0t3Iv5UHmUvrjT9jDctG3Sqc4KqY1

# Credit Card Fraud Detection - K-Nearest Neighbor(KNN)

## Importing the Dependencies
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

import seaborn as sns
import matplotlib.pylab as plt

# %matplotlib inline

# loading the dataset to a Pandas DataFrame
df = pd.read_csv('/content/creditcard.csv') # uses pd which is the alias for pandas df

"""## Generate a smaller dataset for better processing"""

# Filter fraud cases (Class = 1)
fraud_cases = df[df['Class'] == 1]

fraud_cases

# Filter non-fraud cases (Class = 0) and randomly sample 5000 rows
non_fraud_cases = df[df['Class'] == 0].sample(n=5000, random_state=42)

non_fraud_cases

# Combine the two datasets
smaller_dataset = pd.concat([fraud_cases, non_fraud_cases])

smaller_dataset

# Shuffle the dataset
credit_card_data = smaller_dataset.sample(frac=1, random_state=42).reset_index(drop=True)

credit_card_data

"""## Dataset info"""

credit_card_data.describe().transpose()

# dataset informations
credit_card_data.info()

# checking the number of missing values in each column
credit_card_data.isnull().sum()

credit_card_data.hist(figsize=(20,20))

"""## Scatter Plot"""

sns.pairplot(credit_card_data, hue='Class')

"""## Standardize the Variables"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

X = pd.DataFrame(scaler.fit_transform(credit_card_data.drop(["Class"],axis = 1)))
y = credit_card_data.Class

X.head()

"""## Train Test Split"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.30)

"""## Using KNN

"""

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=1)

knn.fit(X_train,y_train)

pred = knn.predict(X_test)

"""## Predictions and Evaluations

"""

from sklearn.metrics import classification_report,confusion_matrix

print(confusion_matrix(y_test,pred))

print(classification_report(y_test,pred))

error_rate = []

# Will take some time
for i in range(1,40):

    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train,y_train)
    pred_i = knn.predict(X_test)
    error_rate.append(np.mean(pred_i != y_test))

plt.figure(figsize=(10,6))
plt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',
         markerfacecolor='red', markersize=10)
plt.title('Error Rate vs. K Value')
plt.xlabel('K')
plt.ylabel('Error Rate')

#Orginal K=3
knn = KNeighborsClassifier(n_neighbors=1)

knn.fit(X_train,y_train)
pred = knn.predict(X_test)

print('WITH k=3')
print('\n')
print(confusion_matrix(y_test,pred))
print('\n')
print(classification_report(y_test,pred))

from sklearn.metrics import ConfusionMatrixDisplay
import matplotlib.pyplot as plt

conf_matrix = confusion_matrix(y_test, pred)
vis = ConfusionMatrixDisplay(confusion_matrix = conf_matrix,display_labels = [True,False])
vis.plot()
plt.grid(False)
plt.show()

